{"version":3,"sources":["components/Navigation/Project/Project.js","components/Navigation/Portfolio/Portfolio.js","components/Contact/ContactMethod/ContactMethod.js","components/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["backgroundColor","1","2","3","4","5","Project","state","slided","onMouseOverHandler","ev","preventDefault","setState","onMouseOutHandler","randomColor","max","min","randomNumber","Math","floor","random","projectSq","this","props","main","title","className","id","style","onMouseEnter","onPointerLeave","to","link","target","Component","projects","descreption","Portfolio","portfolio","map","project","ind","arr","key","onMouseOver","onMouseOut","ContactMethod","icon","scale","backgroundImage","Contact","text","elm","index","href","rel","App","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6636f43e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './Project.css'\r\n\r\nconst backgroundColor = {\r\n  1: '#edae49',\r\n  2: '#d1495b',\r\n  3: '#00798c',\r\n  4: '#00527a',\r\n  5: '#ccc',\r\n}\r\nclass Project extends Component {\r\n\r\n  state = {\r\n    slided: false\r\n  }\r\n\r\n  onMouseOverHandler = (ev) => {\r\n    ev.preventDefault()\r\n    this.setState({ slided: true })\r\n  }\r\n  onMouseOutHandler = () => {\r\n    this.setState({ slided: false })\r\n  } \r\n\r\n  randomColor = (max, min) => {\r\n    const randomNumber = Math.floor(Math.random() * (max - min)) + min\r\n    return backgroundColor[randomNumber]\r\n  }\r\n\r\n  render() {\r\n\r\n    let projectSq\r\n    if (this.state.slided) {\r\n      projectSq = <main>{this.props.main}</main>\r\n    } else {\r\n      projectSq = <h3>{this.props.title}</h3>\r\n    }\r\n\r\n    return (\r\n      <div \r\n        className={`Project project-${this.props.id}`}\r\n        style={{backgroundColor: `${this.randomColor(6, 1)}`}}\r\n        onMouseEnter={this.onMouseOverHandler}\r\n        onPointerLeave={this.onMouseOutHandler}\r\n        >\r\n          <Link to={this.props.link} target='_blank'>\r\n            <div>\r\n              {projectSq}\r\n            </div>\r\n          </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React, { Component } from 'react'\r\n\r\nimport Project from '../Project/Project'\r\nimport './Portfolio.css'\r\n\r\nconst projects = [\r\n  {\r\n    title: 'FX holder',\r\n    descreption: `This app is a holder for your FX transactions. You can add\r\n                transactions, delete them and see summary of it all. After you\r\n                put a rate, your transactions will be recalculated into PLN.\r\n                It's SPA built with React and Redux, styled with css modules.`,\r\n    link: '/fx_holder',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'Management Web Reports',\r\n    descreption: `It's a single-page application for generating reports with\r\n                summary for every day income volumes and others (e.g.\r\n                volume of active clients, volume of assets, volume of\r\n                accounts). App was built with React, styled in CSS and is\r\n                responsive.`,\r\n    link: '/management-web-reports',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'Burger Builder',\r\n    descreption: `Application for composing your favourite burger. Built with\r\n                React, styled in CSS using media queries. This app is a part of\r\n                tutorial`,\r\n    link: '/burger_builder',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'Polluted Cities',\r\n    descreption: `Built with ES6, web app for searching top ten most polluted cities in provided country. Data are provided from public API https://docs.openaq.org/ and cities descriptions come from Wikipedia API.`,\r\n    link: '/polluted_cities/',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'Marilyn',\r\n    descreption: `Web app based on React and Redux. This app gives you 9 most recently uploaded pictures of Marilyn Monroe from Flickr (Flickr API). It was styled with CSS modules and it is responsive`,\r\n    link: '/marilyn',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'Colour Game',\r\n    descreption: `Game rules: click colour square which at least has one the same colour naighbour (not diagonnaly) and collect as much points as possible. Clicked squares disappear, all above them move down and missing ones are newly generated. App was built with React and Redux`,\r\n    link: '/colour_game',\r\n    slided: false\r\n  },\r\n  {\r\n    title: 'ethworks',\r\n    descreption: `Game rules: click colour square which at least has one the same colour naighbour (not diagonnaly) and collect as much points as possible. Clicked squares disappear, all above them move down and missing ones are newly generated. App was built with React and Redux`,\r\n    link: '/colour_game',\r\n    slided: false\r\n  },\r\n]\r\nclass Portfolio extends Component {\r\n\r\n  render () {\r\n    const portfolio = projects.map((project, ind, arr) => {\r\n      return <Project \r\n        title={project.title} \r\n        main={project.descreption} \r\n        link={project.link} \r\n        key={ind}\r\n        onMouseOver={(ev) => this.onMouseOverHandler(ev, ind, arr)}\r\n        onMouseOut={() => this.onMouseOutHandler()}\r\n        slided={project.slided}\r\n        id={ind + 1}\r\n        style={{'backgroundColor': '#abe'}}\r\n        />\r\n    })\r\n    return (\r\n      <div className=\"Projects\">\r\n        <h2 className='portfolio__header'>My projects:</h2>\r\n        <div className='Portfolio'>\r\n          { portfolio }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Portfolio","import React from \"react\";\r\n\r\nimport './ContactMethod.css'\r\n\r\nconst ContactMethod = ({ icon, scale }) => {\r\n  return (\r\n    <div className='ContactMethod'\r\n        style={{backgroundImage: `url(${icon})`}}>\r\n          \r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ContactMethod;\r\n","import React from \"react\";\r\n\r\nimport ContactMethod from \"./ContactMethod/ContactMethod\";\r\nimport \"./Contact.css\";\r\n\r\nconst Contact = () => {\r\n  const contactData = [\r\n    {\r\n      link: \"mailto: stasiak.gregor@gmail.com\",\r\n      icon: './gm.png',\r\n      text: 'EmailMe'\r\n    },\r\n    {\r\n      link: \"https://www.linkedin.com/in/grzegorz-stasiak\",\r\n      icon: \"./in.png\",\r\n      text: 'LinkedIn'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"Contact\">\r\n      <h1>Contact me:</h1>\r\n      {contactData.map((elm, index) => {\r\n        return (\r\n          <a href={elm.link} \r\n             key={index} \r\n             target='_blank' \r\n             className='Contact---icon'\r\n             rel=\"noopener noreferrer\"\r\n             >\r\n            <ContactMethod icon={elm.icon} />\r\n          </a>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\n\nimport Portfolio from \"./components/Navigation/Portfolio/Portfolio\";\nimport Contact from './components/Contact/Contact'\nimport './App.css'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Portfolio />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n)\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}